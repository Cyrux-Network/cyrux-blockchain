---
source: crates/phactory/api/tests/test_block_abi.rs
assertion_line: 21
expression: "type_info_stringify::<blocks::DispatchBlockReq>()"
---
phactory_api::blocks::GenericBlockHeaderWithChanges = struct {
    block_header: sp_runtime::generic::header::Header<u32,Hash>,
    storage_changes: cyrux_trie_storage::ser::StorageChanges,
}
sp_runtime::traits::BlakeTwo256 = struct {
}
sp_runtime::generic::header::Header = struct {
    parent_hash: primitive_types::H256,
    number: Compact<u32>,
    state_root: primitive_types::H256,
    extrinsics_root: primitive_types::H256,
    digest: sp_runtime::generic::digest::Digest,
}
primitive_types::H256 = struct {
    : [u8; 32],
}
sp_runtime::generic::digest::Digest = struct {
    logs: Vec<sp_runtime::generic::digest::DigestItem>,
}
sp_runtime::generic::digest::DigestItem = enum {
    [6]PreRuntime([u8; 4], Vec<u8>)
    [4]Consensus([u8; 4], Vec<u8>)
    [5]Seal([u8; 4], Vec<u8>)
    [0]Other(Vec<u8>)
    [8]RuntimeEnvironmentUpdated,
}
cyrux_trie_storage::ser::StorageChanges = struct {
    main_storage_changes: Vec<(Vec<u8>, Option<Vec<u8>>)>,
    child_storage_changes: Vec<(Vec<u8>, Vec<(Vec<u8>, Option<Vec<u8>>)>)>,
}
Option = enum {
    [0]None,
    [1]Some(Vec<u8>)
}
phactory_api::blocks::DispatchBlockReq = struct {
    blocks: Vec<phactory_api::blocks::GenericBlockHeaderWithChanges<u32,sp_runtime::traits::BlakeTwo256>>,
}

